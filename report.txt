HOW TO COMPILE
(Part 1)
javac BDayParty.java
java BDayParty

>>>Output

(Part 2)
javac ATRM.java
java ATRM

>>>Output
(Uncomment line 63 on ATRM.java for a full report to see that it's working, it'll display all the numbers in each LL)


REPORT FOR PART 1:

This problem took me a whole lot of time to solve. That's beside the point.

My solution to improve the minotaurs dilema was to assign specific servants specific tasks. The servants maintain a line of communication to achieve their goal
Whenever a servant adds a gift to the chain, another servant is notified, that servent will then start to remove them from the chain in the order
in which they were placed on it. There's probably a more efficient way to do this, that takes advantage of the ordering of the list, but I found this to be easier.
Further, another servant will use contains on random numbers, if they get a hit, they remove the present at that moment.

Additionally, the servants that are adding will stop adding when the chain hits a certain capacity (3000 in my implementation). I did this because I realized that adding all
at once and then deleting all at once was abysmally slow, I forgot how awful linear traversal is.

NOTE: The algorithm is still pretty slow for 500,000 presents, but is REAL fast for 100,000. I figured it should only take about 5x as long but it felt more like 10x as long.
Not entirely sure what's causing such a slowdown with the more numbers (maybe it's shuffle taking a while, idk).

NOTE 2: My original structure worked around random task delegation. This was horribly broken, there was no system between the servants to actually efficiently remove presents
I would legit just keep searching and searching with random numbers, iterating thru 1-500,000 again and again. I ended up removing like 2000 presents in 5 minutes lololol
It was really slow and inefficient.

NOTE 3: (IMPROTANT)
After some discussion about this problem, I realized that the best solution was to remove a node just as soon as it's added. This removes a ton of the overhead I was having
with manipulating a ton of different atomic variables all the time. This solution is blazing fast and sees really great runtimes even for 500,000 nodes. This is 
the solution I ended up with.

If you want to see the linked list in action, please uncomment line 62 of Servant.java, you can assume that if I'm successfully deleting then I'm also successfully adding.

+===++===++===++===++===++===++===++===++===++===++===++===++===++===++===++===++===++===++===++===++===++===++===++===++===++===++===++===++===++===+
REPORT FOR PART 2:

This problem sounded really hard when I first read through it, but then I realized it wasn't too bad. I reused the wait-free linked-list, but only needed the add function.
I decided the best approach was an array of linked lists, one block for each 10 min interval. From here the implementation was fairly simple. Just populate each list with 
random values (as stated in the problem statement) in each 10 minute interval. From there, gather that info into new arrays for indexing and then go to town. We know our list is
already sorted, and doesn't support duplicate values, so it should be easy from there. Grab the first and last 5 from each interval, compare them. Difference is always last-first, take the higest of them all.

My solutiuon guarentees progress by using a wait-free linked list, no sensor will have to wait and miss their opportunity.
The solution is fast. it takes 8 adds simultaneously, but no list will ever expand past 80 nodes. The solution is correct because it separates the values by time interval, if we had only
one list for all readings, we'd lose track of time (unless we add a field to the node), and it would relay inaccurate results. Duplicate values that are true (like 70 reading at 0-10 & 10-20) wouldn't exist.
But since there's 8 sensors, we can assume sometimes they're reading the same values at the same time, creating a redundancy, so the list not carrying duplicates can be justifiable.